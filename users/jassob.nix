{ config, pkgs, ... }:

{
  home = {
    packages = with pkgs; [
      # Applications
      alacritty
      autorandr
      bat
      coreutils
      diffutils
      drive
      entr
      fasd
      file
      gnupg
      google-chrome
      graphviz
      htop
      ispell
      light
      logseq
      mu
      nixpkgs-fmt
      networkmanager
      openssh
      pass
      pavucontrol
      playerctl
      pciutils
      ripgrep
      silver-searcher
      spotify
      sshfs
      steam
      stow
      tdesktop
      tmux
      translate-shell
      unzip
      usbutils
      vlc
      wally-cli
      xclip
      zathura
      zoom-us

      # Haskell development
      haskellPackages.ghc
      haskellPackages.hlint
      haskellPackages.cabal-install
      haskellPackages.cabal2nix
      haskellPackages.stack
      haskell-language-server
      haskellPackages.brittany

      # Rust development
      rustup

      # Web development
      yarn
      nodejs
      nodePackages.typescript-language-server
      nodePackages.prettier

      # Appearance
      adapta-gtk-theme
      gnome3.adwaita-icon-theme
      gnomeExtensions.ddterm
      gnomeExtensions.caffeine
      gnomeExtensions.run-or-raise

      # For my XMonad setup
      blueman
      compton
      feh
      i3lock
      imagemagick
      libnotify
      networkmanagerapplet
      pavucontrol
      pulsemixer
      scrot
      sxhkd
      trayer
      haskellPackages.xmobar
      xorg.xmessage

      # Fonts
      corefonts # Microsoft free fonts
      dejavu_fonts
      fira-code
      fira-code-symbols
      hasklig
      inconsolata
      input-fonts
      iosevka
      ubuntu_font_family
      xits-math
      (nerdfonts.override {
        fonts = [
          "Iosevka"
          "FiraCode"
          "Inconsolata"
        ];
      })
    ];

    file = {
      ".gtkrc-2.0".text = ''
        # GENERATED CODE, DO NOT EDIT!
        # This file is generated by home-manager. Any changes made to this
        # file will be lost on next home-generation.
        include "~/.gtkrc-2.0.mine"
        gtk-theme-name="Adapta-Nokto-Eta"
        gtk-icon-theme-name="Adwaita"
        gtk-font-name="Sans 10"
        gtk-cursor-theme-name="Adwaita"
        gtk-enable-event-sounds=1
        gtk-enable-input-feedback-sounds=1
        gtk-xft-antialias=1
        gtk-xft-hinting=1
        gtk-xft-hintstyle="hintfull"
        gtk-xft-rgba="rgb"
      '';

      ".shell/aliases".text = ''
        # GENERATED CODE, DO NOT EDIT!
        # This file is generated by home-manager. Any changes made to this
        # file will be lost on next home-generation.
        alias ls="ls --color=auto"
        alias ll="ls -alF"
        # Keyboard layouts
        alias se="${pkgs.xorg.setxkbmap}/bin/setxkbmap -model emacs2 -option ctrl:nocaps,compose:rwin se"
        alias dv="${pkgs.xorg.setxkbmap}/bin/setxkbmap -variant dvorak -model emacs2 -option ctrl:nocaps,compose:rwin se"
        # Bluetooth
        alias sony-connect="${pkgs.bluez}/bin/bluetoothctl connect 38:18:4C:D3:1A:20"
        alias sony-disconnect="${pkgs.bluez}/bin/bluetoothctl disconnect 38:18:4C:D3:1A:20"
        # Emacs
        alias emproj='emacs --eval "(setq server-name \"$(basename $PWD)\")" --funcall server-start'
        alias e='emacsclient -nw'
        alias dock="~/.configurations/work-from-home.sh"
        alias dock-ask="~/.configurations/work-from-home.sh -i"
        alias undock="~/.configurations/laptop.sh"
      '';

      ".mbsyncrc".text = ''
        # GENERATED CODE, DO NOT EDIT!
        # This file is generated by home-manager. Any changes made to this
        # file will be lost on next home-generation.
        IMAPAccount personal
        Host imap.gmail.com
        Port 993
        User jacob.t.jonsson@gmail.com
        PassCmd "${pkgs.pass}/bin/pass notes/gmail-app-password"
        SSLType IMAPS
        SSLVersions TLSv1.2
        CertificateFile "${pkgs.cacert}/etc/ssl/certs/ca-bundle.crt"

        IMAPStore personal-remote
        Account personal

        MaildirStore personal-local
        Path ~/.mail/personal/
        Inbox ~/.mail/personal/Inbox

        # Channels
        Channel personal-inbox
        Far :personal-remote:
        Near :personal-local:
        Create Near
        Expunge Both
        SyncState *

        Channel personal-all
        Far :personal-remote:"[Gmail]/All Mail"
        Near :personal-local:"all"
        Create Near
        Expunge Both
        SyncState *

        Channel personal-sent
        Far :personal-remote:"[Gmail]/Sent Mail"
        Near :personal-local:"sent"
        Create Near
        Expunge Both
        SyncState *

        Channel personal-starred
        Far :personal-remote:"[Gmail]/Starred"
        Near :personal-local:"starred"
        Create Near
        Expunge Both
        SyncState *

        Channel personal-trash
        Far :personal-remote:"[Gmail]/Trash"
        Near :personal-local:"trash"
        Create Near
        Expunge Both
        SyncState *

        # Groups
        Group personal
        Channel personal-inbox
        Channel personal-all
        Channel personal-sent
        Channel personal-starred
        Channel personal-trash
      '';
    };

    pointerCursor = {
      package = pkgs.vanilla-dmz;
      name = "Vanilla-DMZ";
      x11.enable = true;
    };

    stateVersion = "21.11";
  };

  manual.html.enable = true;

  xdg.enable = true;

  # Ensure fonts installed via Nix are picked up.
  fonts.fontconfig.enable = true;

  programs = {
    alacritty = {
      enable = true;
      settings = {
        window.decorations = "none";
        window.startup_mode = "Maximized";
        font.normal.family = "Iosevka Nerd Font";
        draw_bold_text_with_bright_colors = true;
        colors.primary = { background = "#1d2021"; foreground = "#ebdbbd"; };
        colors.normal = {
          black = "#000000";
          red = "#d54e53";
          green = "#b9ca4a";
          yellow = "#e6c547";
          blue = "#7aa6da";
          magenta = "#c397d8";
          cyan = "#70c0ba";
          white = "#eaeaea";
        };
        colors.bright = {
          black = "#666666";
          red = "#ff3334";
          green = "#9ec400";
          yellow = "#e7c547";
          blue = "#7aa6da";
          magenta = "#b77ee0";
          cyan = "#54ced6";
          white = "#ffffff";
        };
        url.modifiers = "Control";
        selection.save_to_clipboard = true;
        key_bindings = [
          { key = "Key0"; mods = "Control"; action = "ResetFontSize"; }
          { key = "Plus"; mods = "Control"; action = "IncreaseFontSize"; }
          { key = "Minus"; mods = "Control"; action = "DecreaseFontSize"; }
        ];
      };
    };

    bash = {
      enable = true;
      enableVteIntegration = true;
      historyControl = [ "ignoredups" "ignorespace" ];
      historyFile = "/home/jassob/.shell/history";
      initExtra = ''
        PROMPT_COLOR=$(echo 33 34 32 36 35 | ${pkgs.findutils}/bin/xargs ${pkgs.coreutils}/bin/shuf -n 1 -e)
        PS1="\[\e[''${PROMPT_COLOR}m\]\w\[\e[00m\] \$ "
        # Setup fasd
        eval "$(${pkgs.fasd}/bin/fasd --init auto)"
        # Source shell aliases
        . $HOME/.shell/aliases
        # Source secrets
        [ -f ~/.shell/secrets ] && . ~/.shell/secrets || true
      '';
      profileExtra = ''
        # Setup GPG
        export GPG_TTY=$(tty)
        if ! pgrep -x "gpg-agent" > /dev/null; then
          ${pkgs.gnupg}/bin/gpgconf --launch gpg-agent
        fi
        export PATH=~/.local/bin:$PATH
        export SSH_AUTH_SOCK=$(${pkgs.gnupg}/bin/gpgconf --list-dirs agent-ssh-socket)
        if [ -f "~/.xsessionrc" ]; then . ~/.xsessionrc; fi
      '';

      sessionVariables = {
        # Download programs temporarily if missing
        NIX_AUTO_RUN = true;
        # Only show the last two directories in current path
        PROMPT_DIRTRIM = "2";
        # Update shell history on every command
        PROMPT_COMMAND = "history -a;$PROMPT_COMMAND";
      };
    };

    browserpass = {
      enable = true;
      browsers = [ "chrome" "firefox" ];
    };

    command-not-found.enable = true;

    emacs = {
      enable = true;
      package = (pkgs.emacsWithPackagesFromUsePackage {
        config = "~/.emacs";
        package = pkgs.emacs28NativeComp;
        extraEmacsPackages = epkgs: [ epkgs.use-package ];
      });
    };

    exa = {
      enable = true;
      enableAliases = true;
    };

    firefox = {
      enable = true;
      package = (pkgs.firefox.override {
        # See nixpkgs' firefox/wrapper.nix to check which options you can use
        cfg = {
          # Gnome shell native connector
          enableGnomeExtensions = true;
          # Browserpass
          enableBrowserpass = true;
        };
      });
      profiles.jassob = {
        isDefault = true;
        userChrome = ''
          #TabsToolbar {
              visibility: collapse !important;
              margin-bottom: 21px !important;
          }

          #sidebar-box[sidebarcommand="treestyletab_piro_sakura_ne_jp-sidebar-action"] #sidebar-header {
              visibility: collapse !important;
          }
        '';
      };
    };

    fzf = {
      enable = true;
      enableBashIntegration = true;
      enableZshIntegration = true;
    };

    git = {
      enable = true;
      userName = "Jacob Jonsson";
      userEmail = "jacob.t.jonsson@gmail.com";

      delta.enable = true;

      signing.key = "D822DFB8049AF39ADF43EA0A7E30B9B047F7202E";
      signing.signByDefault = true;

      aliases = {
        amend = "commit --amend -C HEAD";
        fp = "push --force-with-lease";
        sha = "rev-parse --short HEAD";
      };

      extraConfig = {
        github.user = "Jassob";
        pull.rebase = true;
        rebase.autosquash = true;
        rerere.enabled = true;

        url."ssh://git@github.com:einride/".insteadOf = "https://github.com/einride/";
      };
    };

    gpg = {
      enable = true;
      settings = {
        keyserver = "hkps://hkps.pool.sks-keyservers.net";
        keyserver-options = "no-honor-keyserver-url";
        keyid-format = "0xlong";
      };
    };

    nix-index = {
      enable = true;
      enableBashIntegration = false;
      enableZshIntegration = false;
    };

    rofi = {
      enable = true;
      pass = {
        enable = true;
        extraConfig = "help_color=\"#FA6607\"";
      };
      theme = "gruvbox-dark";
      package = pkgs.rofi.override { plugins = [ pkgs.rofi-emoji ]; };
    };

    zsh = {
      enable = true;
      defaultKeymap = "emacs";
      enableCompletion = true;
      enableAutosuggestions = true;
      history = {
        path = "/home/jassob/.shell/history";
        ignoreDups = true;
        share = true;
      };

      sessionVariables = {
        # Download programs temporarily if missing
        NIX_AUTO_RUN = true;
        # Only show the last two directories in current path
        PROMPT_DIRTRIM = "2";
      };

      profileExtra = ''
        # Setup GPG
        export GPG_TTY=$(tty)
        if ! pgrep -x "gpg-agent" > /dev/null; then
            ${pkgs.gnupg}/bin/gpgconf --launch gpg-agent
        fi
        export SSH_AUTH_SOCK=$(${pkgs.gnupg}/bin/gpgconf --list-dirs agent-ssh-socket)
        export PATH=$HOME/.local/bin:$PATH
        # Add keybindings
        bindkey '^T' transpose-chars
        bindkey '[T' transpose-words
        bindkey '^X^A^F' fzf-file-widget
        # Add keybindings from /etc/inputrc
        bindkey "\e[1~" beginning-of-line
        bindkey "\eOH" beginning-of-line
        bindkey "\e[H" beginning-of-line
        bindkey "\e[5~" beginning-of-history
        bindkey "\e[6~" end-of-history
        bindkey "\e[4~" end-of-line
        bindkey "\e[8~" end-of-line
        bindkey "\eOF" end-of-line
        bindkey "\e[F" end-of-line
        bindkey "\e[3~" delete-char
        bindkey "\e[2~" quoted-insert
        bindkey "\e[5C" forward-word
        bindkey "\e[1;5C" forward-word
        bindkey "\e[5D" backward-word
        bindkey "\e[1;5D" backward-word

        if [ -f "$HOME/.xsessionrc" ]; then . $HOME/.xsessionrc; fi
      '';

      initExtra = ''
        if [[ $TERM == dumb || $TERM == emacs || ! -o interactive ]]; then
            unsetopt zle
            unset zle_bracketed_paste
            export PS1='%m %~ $ '
        fi

        # Setup fasd
        eval "$(${pkgs.fasd}/bin/fasd --init posix-alias zsh-hook \
             zsh-ccomp zsh-ccomp-install zsh-wcomp zsh-wcomp-install)"
        # Setup prompt
        PROMPT_COLOR=$(echo yellow blue green cyan magenta | ${pkgs.findutils}/bin/xargs ${pkgs.coreutils}/bin/shuf -n 1 -e)
        PROMPT="%B%F{$PROMPT_COLOR}%}%3~%f%b%f%F{white} %# %f";

        # Source .shell/aliases
        . ~/.shell/aliases
      '';
    };
  };

  services = {
    dunst = {
      enable = true;
      settings = {
        global = {
          font = "Hasklig 12";
          # allow Pango markup
          markup = "full";
          # slight transparency if composer is run
          transparency = 5;
          # don't timeout notifications if idle for more than 2 min
          idle_threshold = 120;
          # show notifications on monitor with keyboard focus
          follow = "keyboard";
          dmenu = "${pkgs.rofi}/bin/rofi -dmenu -p dunst:";
          browser = "${pkgs.firefox}/bin/firefox";
          # Keyboard shortcuts
          close = "ctrl+space";
          close_all = "ctrl+shift+space";
          history = "ctrl+section";
          context = "ctrl+shift+period";
        };
        # Urgencies, colors taken from
        # https://github.com/lighthaus-theme/dunst
        urgency_low = {
          frame_color = "#1D918B";
          foreground = "#FFEE79";
          background = "#18191E";
          timeout = 5;
        };
        urgency_normal = {
          frame_color = "#D16BB7";
          foreground = "#FFEE79";
          background = "#18191E";
          timeout = 10;
        };
        urgency_critical = {
          frame_color = "#FC2929";
          foreground = "#FFFF00";
          background = "#18191E";
          timeout = 0;
        };
        # Custom rules
        disturb = {
          summary = "*dunst...*";
          urgency = "low";
        };
      };
    };

    emacs = {
      enable = true;
      client.enable = true;
      socketActivation.enable = true;
    };

    gpg-agent = {
      enable = true;
      extraConfig = ''
        pinentry-program ${pkgs.pinentry}/bin/pinentry
        allow-emacs-pinentry
        enable-ssh-support
      '';
      sshKeys = [
        # Private key
        "31FFDEC76903AFE64324FA2FAF64B6C07CAB091A"
      ];
    };

    # Mail synchronization
    mbsync = {
      enable = true;
      postExec = "${pkgs.mu}/bin/mu index";
    };

    # X11 composition
    picom.enable = true;

    # Enable redshift
    redshift = {
      enable = true;
      temperature.day = 4000;
      temperature.night = 3500;
      longitude = "11.98";
      latitude = "57.68";
    };

    # Enable disk monitor and mounter
    udiskie.enable = true;

    sxhkd = {
      enable = true;
      keybindings = {
        "{XF86AudioLowerVolume, ctrl + F11}" = ''
          pulsemixer --change-volume -5 && notify-send "Volume: $(pulsemixer --get-volume | cut -d ' ' -f 1)%"'';

        "{XF86AudioRaiseVolume, ctrl + F12}" = ''
          pulsemixer --change-volume +5 && notify-send "Volume: $(pulsemixer --get-volume | cut -d ' ' -f 1)%"'';

        "{XF86AudioMute, ctrl + F10}" = ''
          pulsemixer --toggle-mute && notify-send "Muted: $(\
               if [[ $(pulsemixer --get-mute | cut -d ' ' -f 1) == 0 ]]; \
                      then echo No; \
                      else echo Yes; \
               fi)"'';

        "{XF86MonBrightnessUp, ctrl + F6}" = ''
          light -A 5 && notify-send "Brightness: $(light | cut -f 1 -d .)%"'';

        "{XF86MonBrightnessDown, ctrl + F5}" =
          ''light -U 5 && notify-send "Brightness: $(light | cut -f 1 -d .)%"'';

        "XF86Audio{Pause,Play,Next,Prev}" = "${pkgs.playerctl}/bin/playerctl {pause,play,next,previous}";

        "XF86KbdBrightness{Up,Down}" = "asus_kbd_backlight {increase,decrease}";

        "super + x; o" = "${pkgs.rofi}/bin/rofi -show drun";

        "super + x; f" = "$HOME/.local/bin/openfile -i \"rofi -dmenu\"";

        "super + p" = "rofi-pass";

        "super + x ; e ; c" = "emacsclient -c -e \"(org-capture)\"";

        "super + x; r" = "rofi -show emoji";

        "super + e" = "$HOME/dotfiles/jassob/.local/bin/startemacs -i \"rofi -dmenu -p Emacs\"";

        "super + x; l" = "i3lock && sleep 5s; xset dpms force suspend";

        "super + x; L" = "i3lock && systemctl suspend";

        "super + x; p" = "${pkgs.scrot}/bin/scrot -u -e 'mv $f ~/pictures/screenshots/'";

        "super + x; P" = "exec import -window root png:$HOME/pictures/screenshots/screenshot_$(date +%F_%H-%M-%S).png";

        "{super + g, super + x ; s ; d}" = "prompt-search -s duckduckgo -b surf";

        "super + x; s ; g" = "prompt-search -s google -b surf";

        "super + x; s ; h" = "prompt-search -s hoogle -b surf";

        "super + x; s ; p" = "prompt-search -s hackage -b surf";

        "{super + b, super + x ; w ; b}" = "prompt-open-url -b surf";

        "super + x; w ; c" = "surf https://google.com/calendar";

        "super + x; w ; m" = "surf https://messenger.com";

        "super + x; w ; i" = "surf https://mail.google.com";

        "super + x; w ; t" = "surf https://www.telegram.org/dl/webogram";

        # make sxhkd reload its configuration files:
        "super + Escape" = "pkill -USR1 -x sxhkd";
      };
    };
  };

  xsession = {
    enable = true;
    windowManager.xmonad = {
      enable = true;
      config = /home/jassob/dotfiles/xmonad/src/xmonad/Main.hs;
      enableContribAndExtras = true;
      extraPackages = hpkgs: [
        hpkgs.xmonad-contrib
        hpkgs.xmonad-extras
        hpkgs.xmobar
      ];
    };

    initExtra = ''
      # Set correct keyboard layout
      setxkbmap se -model emacs2 -option ctrl:nocaps
    '';

    profileExtra = ''
      # Restore last wallpaper
      if [ -f "$${HOME}"/.fehbg ]; then
         $${HOME}/.fehbg
      else
         systemctl start --user dwall.service
      fi
      # Launch hotkey daemon (and make it detect keymap changes)
      ${pkgs.sxhkd}/bin/sxhkd -m -1 & disown %1
    '';
  };
}
